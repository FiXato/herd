#!/usr/bin/env ruby
require 'yaml'

class Herd
  attr_reader :project

  def initialize(project=nil)
    @project = project
  end

  def init
    proj = config[project] ||= {}
    proj['rails_dirs'] ||= []
    proj['merbs'] ||= []
    proj['mongrel_options'] ||= []
    File.open(config_file, 'wb') {|f| f.write(config.to_yaml)}
  end

  def list
    config.each do |project_name, options|
      puts project_name
      for type in %w[rails_dirs merbs]
        if options[type]
          puts '  %s: %i' % [type,options[type].size]
          for project_dir in options[type]
            puts '    - %s' % project_dir
          end
        end
      end
      puts '  mongrel_options: %s' % options['mongrel_options'].join(' ') if options['mongrel_options'].size > 0
    end
  end

  def start
    check_rails_dirs
    all_mongrels 'start'
    all_merbs 'start'
  end

  def stop
    all_mongrels 'stop'
    all_merbs 'stop'
  end

  def restart
    all_mongrels 'restart'
    all_merbs 'stop'
    all_merbs 'start'
  end

  private

  def all_merbs(action)
    merbs.each do |merb_options|
      merb(merb_options, action)
    end
  end

  def all_mongrels(cmd)
    rails_dirs.each do |dir|
      mongrel(dir, cmd)
    end
  end

  def check_rails_dirs
    raise "No rails directories defined for this project" if rails_dirs.size == 0
  end

  def config
    @config ||= YAML.load_file(config_file)
  rescue SystemCallError => e
    return @config ||= {}
  end

  def config_file
    File.expand_path("~/.herd.yml")
  end

  def mongrel(dir, cmd)
    sh(('cd %s' % dir), ('mongrel_rails cluster::%s %s' % [cmd, mongrel_options.join(' ')]))
  end

  def merb(options, action)
    if action == 'start'
      merb_options = '-d'
      options.each do |key, value|
        case key
        when 'port'
          merb_options << ' -p %s' % value
        when 'env'
          merb_options << ' -e %s' % value
        end
      end
    else
      merb_options = '-k all'
    end
    sh(
      'cd %s' % options['dir'],
      'merb %s' % merb_options
    )
  end

  def merbs
    @merbs ||= (project_config['merbs'] || [])
  end

  def mongrel_options
    @mongrel_options ||= (project_config['mongrel_options'] || [])
  end

  def project_config
    @project_config ||= (config[project] || {})
  end

  def rails_dirs
    @rails_dirs ||= (project_config['rails_dirs'] || [])
  end

  def sh(*cmds)
    printf "# %s\n" % cmds.join(" && \n#   ")
    system cmds.join(" && ")
  end
end

cmd = ARGV.shift
if %w[-h h help --help].include? cmd or cmd.nil?
  puts <<-EOS
Herd - Herd a pack of Rails mongrels

Syntax
  herd <action> <projectname>

Examples
  herd list
    List a short summary of all existing projects.
  herd init foobar
    Create a new entry in ~/.herd.yml for the foobar project:
      ---
      foobar:
        rails_dirs: []
        merbs: []
        mongrel_options: []
    The next step is to edit this entry in a text editor,
    to actually point to your rails directories:
      ---
      foobar:
        rails_dirs:
          - ~/projects/foobar/backend
          - ~/projects/foobar/frontend
        merbs:
        - env: development
          port: 4000
          dir: ~/projects/foobar/uploads
        - env: development
          port: 4100
          dir: ~/projects/foobar/downloads
        mongrel_options:
        - --clean

  herd <start | stop | restart> <projectname>
    Send a command to the mongrel cluster of each rails directory in the project.
  EOS
  exit
end

project = ARGV.shift
h = Herd.new project
h.send(cmd)
